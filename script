local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Hai Dong Hub",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Script Cao Binh Dau Tien",
   LoadingSubtitle = "by Hoang Hai Dong",
   ShowText = "Rayfield", -- for mobile users to unhide rayfield, change if you'd like
   Theme = Theme = {
    TextColor = Color3.fromRGB(240, 255, 255), -- Neon white/cyan

    Background = Color3.fromRGB(15, 15, 30), -- Deep dark for neon contrast
    Topbar = Color3.fromRGB(0, 255, 255), -- Neon cyan
    Shadow = Color3.fromRGB(20, 20, 40),

    NotificationBackground = Color3.fromRGB(10, 10, 40),
    NotificationActionsBackground = Color3.fromRGB(0, 255, 128), -- Neon green

    TabBackground = Color3.fromRGB(40, 0, 80), -- Neon purple
    TabStroke = Color3.fromRGB(10, 255, 200), -- Neon cyan/green
    TabBackgroundSelected = Color3.fromRGB(255, 20, 147), -- Neon pink
    TabTextColor = Color3.fromRGB(0, 255, 255),
    SelectedTabTextColor = Color3.fromRGB(255, 255, 0), -- Neon yellow

    ElementBackground = Color3.fromRGB(20, 20, 40),
    ElementBackgroundHover = Color3.fromRGB(0, 255, 255), -- Neon cyan
    SecondaryElementBackground = Color3.fromRGB(25, 25, 60),
    ElementStroke = Color3.fromRGB(255, 0, 255), -- Neon magenta
    SecondaryElementStroke = Color3.fromRGB(0, 255, 128), -- Neon green
            
    SliderBackground = Color3.fromRGB(50, 50, 70),
    SliderProgress = Color3.fromRGB(255, 255, 0), -- Neon yellow
    SliderStroke = Color3.fromRGB(0, 255, 255), -- Neon cyan

    ToggleBackground = Color3.fromRGB(30, 30, 50),
    ToggleEnabled = Color3.fromRGB(57, 255, 20), -- Neon green
    ToggleDisabled = Color3.fromRGB(255, 0, 255), -- Neon magenta
    ToggleEnabledStroke = Color3.fromRGB(0, 255, 255), -- Neon cyan
    ToggleDisabledStroke = Color3.fromRGB(255, 20, 147), -- Neon pink
    ToggleEnabledOuterStroke = Color3.fromRGB(255, 255, 0), -- Neon yellow
    ToggleDisabledOuterStroke = Color3.fromRGB(65, 65, 65),

    DropdownSelected = Color3.fromRGB(0, 255, 255), -- Neon cyan
    DropdownUnselected = Color3.fromRGB(20, 20, 40),

    InputBackground = Color3.fromRGB(20, 20, 40),
    InputStroke = Color3.fromRGB(255, 0, 255), -- Neon magenta
    PlaceholderColor = Color3.fromRGB(0, 255, 255) -- Neon cyan
}

   ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "testinghub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("Main", nil) -- Title, Image
local MainSection = MainTab:CreateSection("Main")

Rayfield:Notify({
   Title = "You executed the script",
   Content = "use it",
   Duration = 3,
   Image = 13047715178,
   Actions = { -- Notification Buttons
      Ignore = {
         Name = "Ok",
         Callback = function()
         print("The user tapped Okay!")
      end
   },
},
})

local Button = MainTab:CreateButton({
   Name = "Infinite Jump",
   Callback = function()
       --Toggles the infinite jump between on or off on every script 
local InfiniteJumpEnabled = true
game:GetService("UserInputService").JumpRequest:connect(function()
	if InfiniteJumpEnabled then
		game:GetService"Players".LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
	end
end)
   end,
})

local noclip = false
local NoclipButton = MainTab:CreateButton({
   Name = "Toggle Noclip",
   Callback = function()
       noclip = not noclip
       Rayfield:Notify({
           Title = "Noclip",
           Content = noclip and "Noclip ON" or "Noclip OFF",
           Duration = 2
       })
       game:GetService("RunService").Stepped:Connect(function()
           if noclip and game.Players.LocalPlayer.Character then
               for _, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                   if v:IsA("BasePart") and v.CanCollide == true then
                       v.CanCollide = false
                   end
               end
           end
       end)
   end
})

local SpeedBoostButton = MainTab:CreateButton({
   Name = "Speed Boost",
   Callback = function()
       local player = game.Players.LocalPlayer
       if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
           player.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = 100 -- Change 100 to your desired speed
           Rayfield:Notify({
               Title = "Speed Boost",
               Content = "WalkSpeed set to 100!",
               Duration = 2
           })
       end
   end,
})

local tpUp = true -- State variable to toggle between up and down

local TPUpDownButton = MainTab:CreateButton({
   Name = "Toggle TP Up/Down",
   Callback = function()
      local player = game.Players.LocalPlayer
      if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
         local hrp = player.Character.HumanoidRootPart
         if tpUp then
            hrp.CFrame = hrp.CFrame + Vector3.new(0, 200, 0) -- Go up
            Rayfield:Notify({
               Title = "Teleported!",
               Content = "You have been teleported high up!",
               Duration = 2
            })
         else
            hrp.CFrame = hrp.CFrame + Vector3.new(0, -200, 0) -- Go down
            Rayfield:Notify({
               Title = "Teleported!",
               Content = "You have been teleported down!",
               Duration = 2
            })
         end
         tpUp = not tpUp -- Toggle state for next click
      end
   end,
})

local skeletonEspEnabled = false
local skeletonEspConnections = {}
local skeletonEspDrawings = {}

local function removeSkeletonEsp()
    for _, drawings in pairs(skeletonEspDrawings) do
        for _, drawing in ipairs(drawings) do
            drawing:Remove()
        end
    end
    skeletonEspDrawings = {}
    -- Disconnect all connections
    for _, conn in ipairs(skeletonEspConnections) do
        conn:Disconnect()
    end
    skeletonEspConnections = {}
end

local function createSkeletonEspForPlayer(player)
    if player == game.Players.LocalPlayer then return end
    local drawings = {}
    local runService = game:GetService("RunService")
    -- List of joint pairs to connect (example: head to torso, torso to left arm, etc.)
    local skeletonPairs = {
        {"Head", "UpperTorso"},
        {"UpperTorso", "LowerTorso"},
        {"UpperTorso", "LeftUpperArm"}, {"LeftUpperArm", "LeftLowerArm"}, {"LeftLowerArm", "LeftHand"},
        {"UpperTorso", "RightUpperArm"}, {"RightUpperArm", "RightLowerArm"}, {"RightLowerArm", "RightHand"},
        {"LowerTorso", "LeftUpperLeg"}, {"LeftUpperLeg", "LeftLowerLeg"}, {"LeftLowerLeg", "LeftFoot"},
        {"LowerTorso", "RightUpperLeg"}, {"RightUpperLeg", "RightLowerLeg"}, {"RightLowerLeg", "RightFoot"},
    }
    local function updateSkeleton()
        if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then return end
        -- Remove previous drawings
        for _, d in ipairs(drawings) do d.Visible = false d:Remove() end
        drawings = {}
        for _, pair in ipairs(skeletonPairs) do
            local part0 = player.Character:FindFirstChild(pair[1])
            local part1 = player.Character:FindFirstChild(pair[2])
            if part0 and part1 then
                local pos0 = game.Workspace.CurrentCamera:WorldToViewportPoint(part0.Position)
                local pos1 = game.Workspace.CurrentCamera:WorldToViewportPoint(part1.Position)
                if pos0.Z > 0 and pos1.Z > 0 then
                    local line = Drawing.new("Line")
                    line.From = Vector2.new(pos0.X, pos0.Y)
                    line.To = Vector2.new(pos1.X, pos1.Y)
                    line.Color = Color3.fromRGB(255, 40, 255) -- Neon magenta
                    line.Thickness = 2
                    line.Transparency = 1
                    line.Visible = true
                    table.insert(drawings, line)
                end
            end
        end
        skeletonEspDrawings[player] = drawings
    end
    -- Update every frame
    local conn = runService.RenderStepped:Connect(updateSkeleton)
    table.insert(skeletonEspConnections, conn)
end

local SkeletonESPButton = MainTab:CreateButton({
    Name = "Toggle Skeleton ESP Enemy",
    Callback = function()
        skeletonEspEnabled = not skeletonEspEnabled
        if skeletonEspEnabled then
            for _, player in ipairs(game.Players:GetPlayers()) do
                if player ~= game.Players.LocalPlayer then
                    createSkeletonEspForPlayer(player)
                end
            end
            -- Update for new players joining
            table.insert(skeletonEspConnections, game.Players.PlayerAdded:Connect(function(player)
                createSkeletonEspForPlayer(player)
            end))
            Rayfield:Notify({
                Title = "Skeleton ESP",
                Content = "Skeleton ESP enabled for enemies!",
                Duration = 2
            })
        else
            removeSkeletonEsp()
            Rayfield:Notify({
                Title = "Skeleton ESP",
                Content = "Skeleton ESP disabled.",
                Duration = 2
            })
        end
    end
})
